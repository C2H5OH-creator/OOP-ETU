Программирование — это разработка программных систем (ПС), для которых 1981 году был разработан стандарт IDEF (Icam DEFinition), как средство функционального моделирования ПС. Стоит отметить, что IDEF рекомендована для использования Госстандартом РФ.

В рамках диаграмм функционального моделирования было разработано несколько графических языков моделирования, которые получили следующие названия:

- Нотация IDEF0 - для документирования процессов производства и отображения информации об использовании ресурсов на каждом из этапов проектирования систем,

- Нотация IDEF1 - для документирования информации о производственном окружении систем,

- Нотация IDEF2 - для документирования поведения системы во времени.

Процесс моделирования IDEF представляет собой совокупность методов, правил и процедур, предназначенных для построения функциональной модели системы какой-либо предметной области. Функциональная модель IDEF отображает структуру процессов функционирования системы и ее отдельных подсистем, то есть, выполняемые ими действия и связи между этими действиями. Для этой цели строятся специальные модели, которые позволяют в наглядной форме представить последовательность определенных действий.

Основу методологии IDEF0 составляет графический язык описания процессов, основным элементом которой является:




Прямоугольник представляет собой работу (технологию, процесс, деятельность, функцию или задачу), которая имеет фиксированную цель и приводит к некоторому конечному результату.

Взаимодействие работ между собой и внешним миром описывается в виде стрелок. В IDEF0 различают 5 видов стрелок:

- вход (input) – материал или информация, которые используются и преобразуются работой для получения результата (выхода). Вход отвечает на вопрос «Что подлежит обработке?». В качестве входа для ПС выступают требования к системе (описание предметной области ПрО, используемые библиотеки и т.п.);

- управление (control) – управляющие, регламентирующие и нормативные данные, которыми руководствуется работа. Управление отвечает на вопрос «В соответствии с чем выполняется работа?». Управление влияет на работу, но не преобразуется ей, т.е. выступает в качестве ограничения. В качестве управления могут быть правила, стандарты, нормативы, расценки, устные указания.;

- выход (output) – материал или информация, которые представляют результат выполнения работы. Выход отвечает на вопрос «Что является результатом работы?». Им является сама ПС;

- механизм (mechanism) – ресурсы, которые выполняют работу. Механизм отвечает на вопрос «Кто выполняет работу или посредством чего?». Это коллектив разработчиков, вычислительные, информационные ресурсы, средства разработки и т.п.;

- вызов (call) – стрелка указывает, что некоторая часть работы выполняется контрагентами.

Технология программирования является важнейшим звеном создания программных систем (ПС). Она может быть основана на одной или сочетании нескольких парадигм программирования. Выбор той или иной технологии определяется характером самой решаемой задачи (целью разработки ПС) и не должен исходить от владеющего разработчиком языка программирования. От выбора технологии зависит эффективность самого процесса разработки и качество программного продукта на всех последующих этапах его жизненного цикла.


Парадигма программирования — это совокупность идей и понятий, определяющих стиль написания компьютерных программ, способ концептуализации, определяющий организацию вычислений, и структурирование работы, выполняемой компьютером.

Парадигма программирования не определяется однозначно языком программирования. Практически все современные языки программирования в той или иной мере допускают использование различных парадигм (мультипарадигмальное программирование). Существующие парадигмы также зачастую пересекаются друг с другом в деталях (например, модульное и объектно-ориентированное программирование)


Основные модели программирования

Императивное программирование
Императивное программирование — это парадигма программирования (стиль написания исходного кода компьютерной программы), для которой характерно следующее:

- в исходном коде программы записываются инструкции (команды);

- инструкции должны выполняться последовательно;

- данные, получаемые при выполнении предыдущих инструкций, могут читаться из памяти последующими инструкциями;

- данные, полученные при выполнении инструкции, могут записываться в память.

Императивная программа похожа на приказы, выражаемые повелительным наклонением в естественных языках, то есть представляют собой последовательность команд, которые должен выполнить компьютер.

Основные черты императивных языков:

- использование именованных переменных;

- использование оператора присваивания;

- использование составных выражений;

- использование подпрограмм



Декларативное программирование

Декларативное программирование — это парадигма программирования, в которой задаётся спецификация решения задачи, то есть описывается, что представляет собой проблема и ожидаемый результат. В отличии от императивного программирования, описывающего на том или ином уровне детализации, как решить задачу и представить результат.

В общем и целом, декларативное программирование идёт от человека к машине, тогда как императивное — от машины к человеку. Как следствие, декларативные программы не используют понятия состояния, то есть не содержат переменных и операторов присваивания.


Структурное программирование

Структурное программирование — это парадигма программирования, в основе которой лежит представление программы в виде иерархической структуры блоков.

В соответствии с парадигмой, любая программа, которая строится без использования оператора goto, состоит из трёх базовых управляющих структур: следование, развилка и цикл. Кроме того используются подпрограммы. При этом разработка программы ведётся пошагово, методом «сверху вниз».

Структурное программирование стало основой всего, что сделано в методологии программирования, включая и объектное программирование.



Функциональное программирование

Функциональное программирование — это раздел дискретной математики и парадигма программирования, в которой процесс вычисления трактуется как вычисление значений функций в математическом понимании последних (в отличие от функций как подпрограмм в процедурном программировании).

Оно противопоставляется парадигме императивного программирования, которая описывает процесс вычислений как последовательное изменение состояний. При необходимости, в функциональном программировании вся совокупность последовательных состояний вычислительного процесса представляется явным образом, например, как список.

Основой для функционального программирования является лямбда-исчисление.


Логическое программирование

Логическое программирование — это парадигма программирования, основанная на автоматическом доказательстве теорем и разделе дискретной математики, изучающим принципы логического вывода информации на основе заданных фактов и правил вывода. Логическое программирование основано на теории и аппарате математической логики с использованием математических принципов резолюций.


Объектно-ориентированное программирование

Объектно-ориентированное программирование (ООП) — это парадигма программирования, основанная на представлении программы в виде совокупности взаимодействующих объектов, каждый из которых является экземпляром определённого класса, которые образуют иерархию наследования.

Идеологически ООП — подход к программированию как к моделированию информационных объектов, решающий на новом уровне основную задачу структурного программирования: структурирование информации с точки зрения управляемости. Это существенно улучшает управляемость самим процессом моделирования, что, в свою очередь, особенно важно при реализации крупных проектов.

Управляемость для иерархических систем предполагает минимизацию избыточности данных (аналогичную нормализации) и их целостность. Поэтому созданное удобно управляемым в свою очередь будет и удобно понимаемым. Таким образом, через тактическую задачу управляемости решается стратегическая задача транслировать понимание задачи программистом в наиболее удобную для дальнейшего использования форму.

Парадигма ООП имеет несколько модификаций:

Компонентно-ориентированное программирование

Компонентно-ориентированное программирование (СОР) — это парадигма программирования, существенным образом опирающаяся на понятие компонента, независимого модуля исходного кода программы, предназначенного для повторного использования и развёртывания, и реализующегося в виде множества языковых конструкций (например, классов в объектно-ориентированных языках программирования). Эти конструкции объединяются по общему признаку и организованы в соответствии с определёнными правилами и ограничениями.

Прототипно-ориентированное программирование

Прототипное программирование — это стиль объектно-ориентированного программирования, при котором отсутствует понятие класса, а наследование производится путём клонирования существующего экземпляра объекта, прототипа.

Агентно-ориентированное программирование

Агентно-ориентированный подход (АОП) к программированию — это разновидность представления программ или парадигма программирования, в которой основополагающими концепциями являются понятия агента и его поведения, зависящего от среды, в которой он находится.

Агентом является всё, что может рассматриваться как воспринимающее свою среду с помощью датчиков и воздействующее на эту среду с помощью исполнительных механизмов.

Безусловно выбор той или иной парадигмы в качестве технологии разработки ПС определяется в первую очередь самой решаемой задачей.

Объектно-ориентированное программирование и его модификации появились в этом списке одними из последних, хотя эта парадигма наиболее логично вытекает из характера происхождения самих решаемых задач. Их мы берем из нашего окружения (материальной и духовной сферы нашей жизни и наших потребностей). В сфере информационных систем ООП получило очень широкое распространение.


Плюсы и минусы ООП

Достоинства:

От любого метода программирования мы ждем, что он поможет нам в решении наших проблем. Но одной из самых значительных проблем в программировании является сложность. Чем больше и сложнее программа, тем важнее становится разбить ее на небольшие, четко очерченные части. Чтобы побороть сложность, необходимо абстрагироваться от мелких деталей. В этом смысле классы представляют собой весьма удобный инструмент.

Классы позволяют проводить конструирование из полезных компонент, обладающих простыми инструментами, что дает возможность абстрагироваться от деталей реализации.

Данные и операции вместе образуют определенную сущность и они не «размазываются» по всей программе, как это нередко бывает в случае процедурного программирования.

Локализация кода и данных улучшает наглядность и удобство сопровождения программного обеспечения.

Инкапсуляция информации защищает наиболее критичные данные от несанкционированного доступа.

ООП дает возможность создавать расширяемые системы (. Это одно из самых значительных достоинств ООП и именно оно отличает данный подход от традиционных методов программирования. Расширяемость означает, что существующую систему можно заставить работать с новыми компонентами, причем без внесения в нее каких-либо изменений. Компоненты могут быть добавлены на этапе выполнения.

Расширение типа (type extension) и вытекающий из него полиморфизм переменных оказываются полезными преимущественно в следующих ситуациях.

Обработка разнородных структур данных. Программы могут работать, не утруждая себя изучением вида объектов. Новые виды могут быть добавлены в любой момент.

Изменение поведения во время выполнения. На этапе выполнения один объект может быть заменен другим. Это может привести к изменению алгоритма, в котором используется данный объект.

Реализация родовых компонент. Алгоритмы можно обобщать до такой степени, что они уже смогут работать более, чем с одним видом объектов.

Доведение полуфабрикатов. Компоненты нет надобности подстраивать под определенное приложение. Их можно сохранять в библиотеке в виде полуфабрикатов и расширять их по мере необходимости до различных законченных продуктов.

Расширение каркаса. Независимые от приложения части предметной области могут быть реализованы в виде каркаса и в дальнейшем расширены за счет добавления частей, специфичных для конкретного приложения.

Многоразового использования программного обеспечения на практике добиться не удается из-за того, что существующие компоненты уже не отвечают новым требованиям. ООП помогает этого достичь без нарушения работы уже имеющихся клиентов, что позволяет нам извлечь максимум из многоразового использования компонент.

Сокращается время на разработку, которое с выгодой может быть отдано другим проектам.

Компоненты многоразового использования обычно содержат гораздо меньше ошибок, чем вновь разработанные, ведь они уже не раз подвергались проверке.

Когда некая компонента используется сразу несколькими клиентами, то улучшения, вносимые в ее код, одновременно оказывают свое положительное влияние и на множество работающих с ней программ.

Если программа опирается на стандартные компоненты, то ее структура и пользовательский интерфейс становятся более унифицированными, что облегчает ее понимание и упрощает ее использование.

Недостатки:

Объектно-ориентированное программирование требует знания четырех вещей.

Необходимо понимать базовые концепции, такие как классы, наследование и динамическое связывание. Для программистов, уже знакомых с понятием модуля и с абстрактными типами данных, это потребует минимальных усилий. Для тех же, кто никогда не использовал инкапсуляцию данных, это может означать изменения мировоззрения и может отнять на изучение значительное количество времени.

Многоразовое использование требует от программиста познакомиться с большими библиотеками классов. А это может оказаться сложнее, чем даже изучение нового языка программирования. Библиотека классов фактически представляет собой виртуальный язык, который может включать в себя сотни типов и тысячи операций.

Проектирование классов — задача куда более сложная, чем их использование. Проектирование класса, как и проектирование языка, требует большого опыта. Это итеративный процесс, где приходится учиться на своих же ошибках.

Очень трудно изучать классы, не имея возможности их «пощупать». Только с приобретением опыта можно уверенно себя почувствовать при работе с использованием ООП.

Часто можно слышать, что ООП является неэффективным. Как же дело обстоит в действительности? Мы должны четко проводить грань между неэффективностью на этапе выполнения, неэффективностью в смысле распределения памяти и неэффективностью, связанной с излишней универсализацией.

Неэффективность на этапе выполнения. Даже при использовании наилучших методов оптимизации ООП-программы в разы медленнее оптимизированных C-программ.

В гибридных языках типа Object Pascal и C++ посылка сообщения приводит лишь к вызову через указатель процедурной переменной. На некоторых машинах сообщения выполняются лишь на 10% медленнее, чем обычные процедурные вызовы. И поскольку сообщения встречаются в программе гораздо реже других операций, их воздействие на время выполнения влияния практически не оказывает.

Однако, существует другой фактор, который затрагивает время выполнения: это абстракция данных. Абстракция запрещает непосредственный доступ к полям класса и требует, чтобы каждая операция над данными выполнялась через методы. Такая схема приводит к необходимости выполнения процедурного вызова при каждом доступе к данным. Однако, когда абстракция используется только там, где она необходима, то замедление вполне приемлемое.

Неэффективность в смысле распределения памяти. Динамическое связывание и проверка типа на этапе выполнения требуют по ходу работы информации о типе объекта. Такая информация хранится в дескрипторе типа, и он выделяется один на класс. Каждый объект имеет невидимый указатель на дескриптор типа для своего класса. Таким образом, в объектно-ориентированных программах требуемая дополнительная память выражается в одном указателе для объекта и в одном дескрипторе типа для класса.

Излишняя универсальность. Неэффективность может также означать, что программа имеет ненужные возможности. В библиотечном классе часто содержится больше методов, чем это реально необходимо. А поскольку лишние методы не могут быть удалены, то они становятся мертвым грузом. Это не воздействует на время выполнения, но влияет на возрастание размера кода.

Однако вернемся к парадигмам. Независимо от выбора технологии создания ПС весь ее жизненный можно представить в виде


Необходимость анализа предметной области до начала написания программы была осознана при разработке масштабных проектов. Процесс создания баз данных существенно отличается от написания программного кода для решения вычислительной задачи. Так, при проектировании базы данных возникает необходимость в предварительной разработке концептуальной схемы или модели, которая отражала бы общие взаимосвязи предметной области и особенности организации соответствующей информации.

Предметная область (ПрО) - это часть реального мира, которая имеет существенное значение или непосредственное отношение к процессу функционирования программы. Другими словами, предметная область включает в себя только те объекты и взаимосвязи между ними, которые необходимы для описания требований и условий решения конкретной задачи.

Выделение исходных или базовых компонентов предметной области, требуемых для решения той или иной задачи, представляет, в общем случае, нетривиальную проблему. Сложность данной проблемы проявляется в неформальном характере процедур или правил, которые можно применять для этой цели. Более того, эта работа должна выполняться совместно со специалистами или экспертами, хорошо знающими предметную область. Например, если разрабатывается база данных для обслуживания пассажиров крупного аэропорта, то в проектировании концептуальной схемы базы данных должны принимать участие штатные сотрудники аэропорта. Эти сотрудники хорошо знают весь процесс обслуживания пассажиров или данную предметную область. Сложность моделирования предметной области и разработки корпоративных информационных систем привело к появлению новой методологии объектно-ориентированный анализ и проектирование.

Объектно-ориентированный анализ (ООА) - это методология анализа предметной области, при которой требования к проектируемой системе воспринимаются с точки зрения классов и объектов, выявленных в предметной области.

Объектно-ориентированное проектирование (ООД) - это методология проектирования, соединяющая в себе процесс объектной декомпозиции и приемы представления логической и физической, а также статической и динамической моделей проектируемой системы.

Объектно-ориентированное программирование (ООП) - это методология программирования, основанная на представлении программы в виде совокупности объектов, каждый из которых является экземпляром определенного класса, а классы образуют иерархию наследования.

Первые две составляющие объектного подхода получили название ООАП.

Базовыми принципами ООАП являются:

- декомпозиция,

- абстрагирование,

- иерархичность,

- многомодельность.

Принцип декомпозиции. Декомпозиция – это разбиение целого на составные элементы. В рамках объектного подхода рассматривают два вида декомпозиции: алгоритмическую и объектную.

Объектная декомпозиция предполагает выделение основных содержательных элементов задачи, разбиение их на типы (классы), определение свойств (данные) и поведения (операции) для каждого класса его, а также взаимодействия классов друг с другом. Объектная декомпозиция поддерживаются всеми современными объектно-ориентированными языками программирования.

Принцип абстрагирования. Абстрагирование применяется при решении многих задач - любая модель позволяет абстрагироваться от реального объекта, подменяя его изучение исследованием формальной модели. Абстрагирование в ООП позволяет выделить основные элементы предметной области, обладающие одинаковой структурой и поведением. Такое разбиение предметной области на абстрактные классы позволяет существенно облегчить анализ и проектирование системы.

Принцип иерархичности предписывает рассматривать процесс построения модели на разных уровнях абстрагирования (детализации) в рамках фиксированных представлений. Иерархия упорядочивает абстракции, помогает разбить задачу на уровни и постепенно ее решать по принципу "сверху – вниз" или "от общего – к частному", увеличивая детализацию ее рассмотрения на каждом очередном уровне.

Принцип многомодельности утверждает, что никакая единственная модель не может с достаточной степенью адекватности описывать различные аспекты сложной системы, и допускающий использование нескольких взаимосвязанных представлений, отражающих отдельные аспекты поведения или структуры систем.